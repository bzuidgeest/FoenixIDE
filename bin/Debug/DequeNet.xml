<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DequeNet</name>
    </assembly>
    <members>
        <member name="T:DequeNet.ConcurrentDeque`1">
            <summary>
            Represents a thread-safe lock-free concurrent double-ended queue, also known as deque (pronounced "deck").
            Items can be appended to/removed from both ends of the deque.
            </summary>
            <typeparam name="T">Specifies the type of the elements in the deque.</typeparam>
        </member>
        <member name="T:DequeNet.IConcurrentDeque`1">
            <summary>
            Represents a thread-safe lock-free concurrent double-ended queue, also known as deque (pronounced "deck").
            Items can be appended to/removed from both ends of the deque.
            </summary>
            <typeparam name="T">Specifies the type of the elements in the deque.</typeparam>
        </member>
        <member name="M:DequeNet.IConcurrentDeque`1.PushRight(`0)">
            <summary>
            Adds an item to the right end of the <see cref="T:DequeNet.IConcurrentDeque`1"/>.
            </summary>
            <param name="item">The item to be added to the <see cref="T:DequeNet.IConcurrentDeque`1"/>.</param>
        </member>
        <member name="M:DequeNet.IConcurrentDeque`1.PushLeft(`0)">
            <summary>
            Adds an item to the left end of the <see cref="T:DequeNet.IConcurrentDeque`1"/>.
            </summary>
            <param name="item">The item to be added to the <see cref="T:DequeNet.IConcurrentDeque`1"/>.</param>
        </member>
        <member name="M:DequeNet.IConcurrentDeque`1.TryPopRight(`0@)">
            <summary>
            Attempts to remove and return an item from the right end of the <see cref="T:DequeNet.IConcurrentDeque`1"/>.
            </summary>
            <param name="item">When this method returns, if the operation was successful, <paramref name="item"/> contains the 
            object removed. If no object was available to be removed, the value is unspecified.</param>
            <returns>true if an element was removed and returned succesfully; otherwise, false.</returns>
        </member>
        <member name="M:DequeNet.IConcurrentDeque`1.TryPopLeft(`0@)">
            <summary>
            Attempts to remove and return an item from the left end of the <see cref="T:DequeNet.IConcurrentDeque`1"/>.
            </summary>
            <param name="item">When this method returns, if the operation was successful, <paramref name="item"/> contains the 
            object removed. If no object was available to be removed, the value is unspecified.</param>
            <returns>true if an element was removed and returned succesfully; otherwise, false.</returns>
        </member>
        <member name="M:DequeNet.IConcurrentDeque`1.TryPeekRight(`0@)">
            <summary>
            Attempts to return the rightmost item of the <see cref="T:DequeNet.IConcurrentDeque`1"/> 
            without removing it.
            </summary>
            <param name="item">When this method returns, <paramref name="item"/> contains the rightmost item
            of the <see cref="T:DequeNet.ConcurrentDeque`1"/> or an unspecified value if the operation failed.</param>
            <returns>true if an item was returned successfully; otherwise, false.</returns>
        </member>
        <member name="M:DequeNet.IConcurrentDeque`1.TryPeekLeft(`0@)">
            <summary>
            Attempts to return the leftmost item of the <see cref="T:DequeNet.IConcurrentDeque`1"/> 
            without removing it.
            </summary>
            <param name="item">When this method returns, <paramref name="item"/> contains the leftmost item
            of the <see cref="T:DequeNet.ConcurrentDeque`1"/> or an unspecified value if the operation failed.</param>
            <returns>true if an item was returned successfully; otherwise, false.</returns>
        </member>
        <member name="M:DequeNet.IConcurrentDeque`1.Clear">
            <summary>
            Removes all items from the <see cref="T:DequeNet.IConcurrentDeque`1"/>.
            </summary>
        </member>
        <member name="P:DequeNet.IConcurrentDeque`1.IsEmpty">
            <summary>
            Gets a value that indicates whether the <see cref="T:DequeNet.IConcurrentDeque`1"/> is empty.
            </summary>
        </member>
        <member name="M:DequeNet.ConcurrentDeque`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DequeNet.ConcurrentDeque`1"/> class.
            </summary>
        </member>
        <member name="M:DequeNet.ConcurrentDeque`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:DequeNet.ConcurrentDeque`1"/> class
            that contains elements copied from the specified collection.
            </summary>
            <param name="collection">The collection whose elements are copied to the new <see cref="T:DequeNet.ConcurrentDeque`1"/>.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="collection"/> argument is null.c
            </exception>
        </member>
        <member name="M:DequeNet.ConcurrentDeque`1.InitializeFromCollection(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initialize the contents of the deque from an existing collection.
            </summary>
            <param name="collection">A collection from which to copy elements.</param>
        </member>
        <member name="M:DequeNet.ConcurrentDeque`1.PushRight(`0)">
            <summary>
            Adds an item to the right end of the <see cref="T:DequeNet.ConcurrentDeque`1"/>.
            </summary>
            <param name="item">The item to be added to the <see cref="T:DequeNet.ConcurrentDeque`1"/>.</param>
        </member>
        <member name="M:DequeNet.ConcurrentDeque`1.PushLeft(`0)">
            <summary>
            Adds an item to the left end of the <see cref="T:DequeNet.ConcurrentDeque`1"/>.
            </summary>
            <param name="item">The item to be added to the <see cref="T:DequeNet.ConcurrentDeque`1"/>.</param>
        </member>
        <member name="M:DequeNet.ConcurrentDeque`1.TryPopRight(`0@)">
            <summary>
            Attempts to remove and return an item from the right end of the <see cref="T:DequeNet.ConcurrentDeque`1"/>.
            </summary>
            <param name="item">When this method returns, if the operation was successful, <paramref name="item"/> contains the 
            object removed. If no object was available to be removed, the value is unspecified.</param>
            <returns>true if an element was removed and returned succesfully; otherwise, false.</returns>
        </member>
        <member name="M:DequeNet.ConcurrentDeque`1.TryPopLeft(`0@)">
            <summary>
            Attempts to remove and return an item from the left end of the <see cref="T:DequeNet.ConcurrentDeque`1"/>.
            </summary>
            <param name="item">When this method returns, if the operation was successful, <paramref name="item"/> contains the 
            object removed. If no object was available to be removed, the value is unspecified.</param>
            <returns>true if an element was removed and returned succesfully; otherwise, false.</returns>
        </member>
        <member name="M:DequeNet.ConcurrentDeque`1.TryPeekRight(`0@)">
            <summary>
            Attempts to return the rightmost item of the <see cref="T:DequeNet.ConcurrentDeque`1"/> 
            without removing it.
            </summary>
            <param name="item">When this method returns, <paramref name="item"/> contains the rightmost item
            of the <see cref="T:DequeNet.ConcurrentDeque`1"/> or an unspecified value if the operation failed.</param>
            <returns>true if an item was returned successfully; otherwise, false.</returns>
        </member>
        <member name="M:DequeNet.ConcurrentDeque`1.TryPeekLeft(`0@)">
            <summary>
            Attempts to return the leftmost item of the <see cref="T:DequeNet.ConcurrentDeque`1"/> 
            without removing it.
            </summary>
            <param name="item">When this method returns, <paramref name="item"/> contains the leftmost item
            of the <see cref="T:DequeNet.ConcurrentDeque`1"/> or an unspecified value if the operation failed.</param>
            <returns>true if an item was returned successfully; otherwise, false.</returns>
        </member>
        <member name="M:DequeNet.ConcurrentDeque`1.StabilizeRight(DequeNet.ConcurrentDeque{`0}.Anchor)">
            <summary>
            Stabilizes the deque when in <see cref="F:DequeNet.ConcurrentDeque`1.DequeStatus.RPush"/> status.
            </summary>
            <remarks>
            Stabilization is done in two steps:
            (1) update the previous rightmost node's right pointer to point to the new rightmost node;
            (2) update the anchor, changing the status to <see cref="F:DequeNet.ConcurrentDeque`1.DequeStatus.Stable"/>.
            </remarks>
            <param name="anchor"></param>
        </member>
        <member name="M:DequeNet.ConcurrentDeque`1.StabilizeLeft(DequeNet.ConcurrentDeque{`0}.Anchor)">
            <summary>
            Stabilizes the deque when in <see cref="F:DequeNet.ConcurrentDeque`1.DequeStatus.LPush"/> status.
            </summary>
            <remarks>
            Stabilization is done in two steps:
            (1) update the previous leftmost node's left pointer to point to the new leftmost node;
            (2) update the anchor, changing the status to <see cref="F:DequeNet.ConcurrentDeque`1.DequeStatus.Stable"/>.
            </remarks>
            <param name="anchor"></param>
        </member>
        <member name="M:DequeNet.ConcurrentDeque`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:DequeNet.ConcurrentDeque`1"/> from left to right.
            </summary>
            <returns>An enumerator for the <see cref="T:DequeNet.ConcurrentDeque`1"/>.</returns>
            <remarks>
            The enumeration represents a moment-in-time snapshot of the contents
            of the deque. It does not reflect any updates to the collection after 
            <see cref="M:DequeNet.ConcurrentDeque`1.GetEnumerator"/> was called. The enumerator is safe to use 
            concurrently with reads from and writes to the deque.
            </remarks>
        </member>
        <member name="M:DequeNet.ConcurrentDeque`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <remarks>
            The enumeration represents a moment-in-time snapshot of the contents
            of the deque. It does not reflect any updates to the collection after 
            <see cref="M:DequeNet.ConcurrentDeque`1.GetEnumerator"/> was called. The enumerator is safe to use 
            concurrently with reads from and writes to the deque.
            </remarks>
        </member>
        <member name="M:DequeNet.ConcurrentDeque`1.Clear">
            <summary>
            Removes all objects from the <see cref="T:DequeNet.ConcurrentDeque`1"/>.
            </summary>
        </member>
        <member name="M:DequeNet.ConcurrentDeque`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryAdd(`0)">
            <summary>
            Attempts to add an object to the <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1"/>.</param>
            <returns>
            true if the object was added successfully; otherwise, false.
            </returns>
            <remarks>
            For <see cref="T:DequeNet.ConcurrentDeque`1"/>, this operation will always add the object to the right
            end of the <see cref="T:DequeNet.ConcurrentDeque`1"/> and return true.
            </remarks>
        </member>
        <member name="M:DequeNet.ConcurrentDeque`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryTake(`0@)">
            <summary>
            Attempts to remove and return an object from the <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1"/>.
            </summary>
            <param name="item">
            When this method returns, if the object was removed and returned successfully, <paramref name="item"/> contains the removed object.
            If no object was available to be removed, the value is unspecified.
            </param>
            <returns>
            true if an object was removed and returned successfully; otherwise, false.
            </returns>
            <remarks>
            For <see cref="T:DequeNet.ConcurrentDeque`1"/>, this operation will attempt to remove the object
            from the left end of the <see cref="T:DequeNet.ConcurrentDeque`1"/>. 
            </remarks>
        </member>
        <member name="M:DequeNet.ConcurrentDeque`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>,
            starting at a particular <see cref="T:System.Array"/> index. 
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array">Array</see> that is the destination of the elements copied from the <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array">Array</see> must have zero-based indexing.</param> 
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is a null reference (Nothing in Visual Basic).</exception> 
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero.</exception> 
            <exception cref="T:System.ArgumentException"> 
            <paramref name="array"/> is multidimensional. -or-
            <paramref name="array"/> does not have zero-based indexing. -or- 
            <paramref name="index"/> is equal to or greater than the length of the <paramref name="array"/>
            -or- The number of elements in the source <see cref="T:System.Collections.ICollection"/> is
            greater than the available space from <paramref name="index"/> to the end of the destination
            <paramref name="array"/>. -or- The type of the source <see cref="T:System.Collections.ICollection"/> cannot be cast
            automatically to the type of the destination <paramref name="array"/>. 
            </exception> 
        </member>
        <member name="M:DequeNet.ConcurrentDeque`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the <see cref="T:DequeNet.ConcurrentDeque`1"/> elements to an existing one-dimensional <see cref="T:System.Array">Array</see>, starting at the specified array index. 
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array">Array</see> that is the destination of the elements copied from the <see cref="T:DequeNet.ConcurrentDeque`1"/>. The <see cref="T:System.Array">Array</see> must have zero-based indexing.
            </param> 
            <param name="index">
            The zero-based index in <paramref name="array"/> at which copying begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is a null reference (Nothing in Visual Basic).
            </exception> 
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero.
            </exception> 
            <exception cref="T:System.ArgumentException">
            <paramref name="index"/> is equal to or greater than the length of the <paramref name="array"/>
            -or- The number of elements in the source <see cref="T:DequeNet.ConcurrentDeque`1"/> is greater than the 
            available space from <paramref name="index"/> to the end of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:DequeNet.ConcurrentDeque`1.ToArray">
            <summary> 
            Copies the items stored in the <see cref="T:DequeNet.ConcurrentDeque`1"/> to a new array.
            </summary> 
            <returns>
            A new array containing a snapshot of elements copied from the <see cref="T:DequeNet.ConcurrentDeque`1"/>.
            </returns>
        </member>
        <member name="M:DequeNet.ConcurrentDeque`1.ToList">
            <summary>
            Takes a moment-in-time snapshot of the deque.
            </summary>
            <returns>A list representing a moment-in-time snapshot of the deque.</returns>
            <remarks>
            The algorithm runs in linear O(n) time.
            
            This implementation relies on the following invariant:
            If at time t, x was the leftmost node and y was the rightmost node, 
            regardless of how many nodes are pushed/popped from either end thereafter, the paths
            (a) x->a (obtained by traversing the deque recursively using a node's right pointer starting from x), and
            (b) y->b (obtained by traversing the deque recursively using a node's left pointer starting from y)
            will always have at least 1 node in common.
            
            This means that, for a given x and y, even if the deque is mutated during the algorithm's
            execution, we can always rebuild the original x-y sequence by finding a node c, common to both
            x->a and y->b paths, and merging the paths by the common node.
            </remarks>
        </member>
        <member name="P:DequeNet.ConcurrentDeque`1.IsEmpty">
            <summary>
            Gets a value that indicates whether the <see cref="T:DequeNet.ConcurrentDeque`1"/> is empty.
            </summary>
        </member>
        <member name="P:DequeNet.ConcurrentDeque`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:DequeNet.ConcurrentDeque`1"/>.
            </summary>
        </member>
        <member name="P:DequeNet.ConcurrentDeque`1.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <returns>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">The SyncRoot property is not supported.</exception>
        </member>
        <member name="P:DequeNet.ConcurrentDeque`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            <returns>
            true if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, false.
            For <see cref="T:DequeNet.ConcurrentDeque`1"/>, this property always returns false.
            </returns>
        </member>
        <member name="M:DequeNet.ConcurrentDeque`1.Anchor.Validate">
            <summary>
            Validates the anchor's state.
            </summary>
        </member>
        <member name="T:DequeNet.Debugging.ConcurrentDequeDebugView`1">
            <summary>
            A debugger view of the <see cref="T:DequeNet.ConcurrentDeque`1"/> that makes it simple to browse the
            collection's contents at a point in time.
            </summary>
            <typeparam name="T">The type of elements stored within.</typeparam>
        </member>
        <member name="M:DequeNet.Debugging.ConcurrentDequeDebugView`1.#ctor(DequeNet.ConcurrentDeque{`0})">
            <summary>
            Constructs a new debugger view object for the provided collection object.
            </summary>
            <param name="deque">A collection to browse in the debugger.</param>
        </member>
        <member name="P:DequeNet.Debugging.ConcurrentDequeDebugView`1.Items">
            <summary>
            Returns a snapshot of the underlying collection's elements.
            </summary>
        </member>
        <member name="T:DequeNet.Debugging.DequeDebugView`1">
            <summary>
            A debugger view of the <see cref="T:DequeNet.Deque`1"/> that makes it simple to browse the
            collection's contents at a point in time.
            </summary>
            <typeparam name="T">The type of elements stored within.</typeparam>
        </member>
        <member name="M:DequeNet.Debugging.DequeDebugView`1.#ctor(DequeNet.Deque{`0})">
            <summary>
            Constructs a new debugger view object for the provided collection object.
            </summary>
            <param name="deque">A collection to browse in the debugger.</param>
        </member>
        <member name="P:DequeNet.Debugging.DequeDebugView`1.Items">
            <summary>
            Returns a snapshot of the underlying collection's elements.
            </summary>
        </member>
        <member name="T:DequeNet.Deque`1">
            <summary>
            Represents a double-ended queue, also known as deque (pronounced "deck").
            Items can be appended to/removed from both ends of the deque.
            </summary>
            <typeparam name="T">Specifies the type of the elements in the deque.</typeparam>
        </member>
        <member name="T:DequeNet.IDeque`1">
            <summary>
            Represents a double-ended queue, also known as deque (pronounced "deck").
            Items can be appended to/removed from both ends of the deque.
            </summary>
            <typeparam name="T">Specifies the type of the elements in the deque.</typeparam>
        </member>
        <member name="M:DequeNet.IDeque`1.PushRight(`0)">
            <summary>
            Adds an item to the right end of the <see cref="T:DequeNet.IDeque`1"/>.
            </summary>
            <param name="item">The item to be added to the <see cref="T:DequeNet.IDeque`1"/>.</param>
        </member>
        <member name="M:DequeNet.IDeque`1.PushLeft(`0)">
            <summary>
            Adds an item to the left end of the <see cref="T:DequeNet.IDeque`1"/>.
            </summary>
            <param name="item">The item to be added to the <see cref="T:DequeNet.IDeque`1"/>.</param>
        </member>
        <member name="M:DequeNet.IDeque`1.PopRight">
            <summary>
            Attempts to remove and return an item from the right end of the <see cref="T:DequeNet.IDeque`1"/>.
            </summary>
            <returns>The rightmost item.</returns>
            <exception cref="T:System.InvalidOperationException">The deque is empty.</exception>
        </member>
        <member name="M:DequeNet.IDeque`1.PopLeft">
            <summary>
            Attempts to remove and return an item from the left end of the <see cref="T:DequeNet.IDeque`1"/>.
            </summary>
            <returns>The leftmost item.</returns>
            <exception cref="T:System.InvalidOperationException">The deque is empty.</exception>
        </member>
        <member name="M:DequeNet.IDeque`1.PeekRight">
            <summary>
            Attempts to return the rightmost item of the <see cref="T:DequeNet.IDeque`1"/> 
            without removing it.
            </summary>
            <returns>The rightmost item.</returns>
            <exception cref="T:System.InvalidOperationException">The deque is empty.</exception>
        </member>
        <member name="M:DequeNet.IDeque`1.PeekLeft">
            <summary>
            Attempts to return the leftmost item of the <see cref="T:DequeNet.IDeque`1"/> 
            without removing it.
            </summary>
            <returns>The leftmost item.</returns>
            <exception cref="T:System.InvalidOperationException">The deque is empty.</exception>
        </member>
        <member name="P:DequeNet.IDeque`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:DequeNet.IDeque`1"/>.
            </summary>
        </member>
        <member name="P:DequeNet.IDeque`1.IsEmpty">
            <summary>
            Gets a value that indicates whether the <see cref="T:DequeNet.IDeque`1"/> is empty.
            </summary>
        </member>
        <member name="P:DequeNet.IDeque`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Index was out of range. Must be non-negative and less than <see cref="P:System.Collections.Generic.ICollection`1.Count"/>.</exception>
        </member>
        <member name="F:DequeNet.Deque`1._buffer">
            <summary>
            Ring buffer that holds the items.
            </summary>
        </member>
        <member name="F:DequeNet.Deque`1._leftIndex">
            <summary>
            The offset used to calculate the position of the leftmost item in the buffer.
            </summary>
        </member>
        <member name="M:DequeNet.Deque`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DequeNet.Deque`1"/> class.
            </summary>
        </member>
        <member name="M:DequeNet.Deque`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DequeNet.Deque`1"/> class with the specified capacity.
            </summary>
            <param name="capacity">The deque's initial capacity.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Capacity cannot be less than 0.</exception>
        </member>
        <member name="M:DequeNet.Deque`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:DequeNet.Deque`1"/> class that contains elements copied from the specified collection.
            </summary>
            <param name="collection">The collection whose elements are copied to the deque.</param>
        </member>
        <member name="M:DequeNet.Deque`1.PushRight(`0)">
            <summary>
            Adds an item to the right end of the <see cref="T:DequeNet.Deque`1"/>.
            </summary>
            <param name="item">The item to be added to the <see cref="T:DequeNet.Deque`1"/>.</param>
        </member>
        <member name="M:DequeNet.Deque`1.PushLeft(`0)">
            <summary>
            Adds an item to the left end of the <see cref="T:DequeNet.Deque`1"/>.
            </summary>
            <param name="item">The item to be added to the <see cref="T:DequeNet.Deque`1"/>.</param>
        </member>
        <member name="M:DequeNet.Deque`1.PopRight">
            <summary>
            Attempts to remove and return an item from the right end of the <see cref="T:DequeNet.Deque`1"/>.
            </summary>
            <returns>The rightmost item.</returns>
            <exception cref="T:System.InvalidOperationException">The deque is empty.</exception>
        </member>
        <member name="M:DequeNet.Deque`1.PopLeft">
            <summary>
            Attempts to remove and return an item from the left end of the <see cref="T:DequeNet.Deque`1"/>.
            </summary>
            <returns>The leftmost item.</returns>
            <exception cref="T:System.InvalidOperationException">The deque is empty.</exception>
        </member>
        <member name="M:DequeNet.Deque`1.PeekRight">
            <summary>
            Attempts to return the rightmost item of the <see cref="T:DequeNet.Deque`1"/> 
            without removing it.
            </summary>
            <returns>The rightmost item.</returns>
            <exception cref="T:System.InvalidOperationException">The deque is empty.</exception>
        </member>
        <member name="M:DequeNet.Deque`1.PeekLeft">
            <summary>
            Attempts to return the leftmost item of the <see cref="T:DequeNet.Deque`1"/> 
            without removing it.
            </summary>
            <returns>The leftmost item.</returns>
            <exception cref="T:System.InvalidOperationException">The deque is empty.</exception>
        </member>
        <member name="M:DequeNet.Deque`1.Clear">
            <summary>
            Removes all items from the <see cref="T:DequeNet.Deque`1"/>.
            </summary>
        </member>
        <member name="M:DequeNet.Deque`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the deque.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the deque.
            </returns>
        </member>
        <member name="M:DequeNet.Deque`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the deque.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the deque.
            </returns>
        </member>
        <member name="M:DequeNet.Deque`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a deque.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the deque.
            </returns>
        </member>
        <member name="M:DequeNet.Deque`1.System#Collections#Generic#ICollection{T}#Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <remarks>For <see cref="T:DequeNet.Deque`1"/>, this operation will add the item to the right end of the deque.</remarks>
        </member>
        <member name="M:DequeNet.Deque`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
        </member>
        <member name="M:DequeNet.Deque`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:DequeNet.Deque`1"/> contains a specific value.
            </summary>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:DequeNet.Deque`1"/>; otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:DequeNet.Deque`1"/>.</param>
        </member>
        <member name="M:DequeNet.Deque`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:DequeNet.Deque`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:DequeNet.Deque`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0 or greater than the <paramref name="array"/>'s upper bound.</exception>
            <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:DequeNet.Deque`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="M:DequeNet.Deque`1.TrimExcess">
            <summary>
            Sets the capacity to the actual number of elements in the <see cref="T:DequeNet.Deque`1"/>.
            </summary>
            <remarks>
            This method can be used to minimize a deque's memory overhead once it is known that no
            new elements will be added to the deque. To completely clear a deque and
            release all memory referenced by the deque, execute <see cref="M:DequeNet.Deque`1.Clear"/> followed by <see cref="M:DequeNet.Deque`1.TrimExcess"/>.
            </remarks>
        </member>
        <member name="M:DequeNet.Deque`1.EnsureCapacity(System.Int32)">
            <summary> 
            Ensures that the capacity of this list is at least the given minimum
            value. If the currect capacity of the list is less than min, the
            capacity is increased to twice the current capacity or to min,
            whichever is larger.
            </summary>
            <param name="min">The minimum capacity required.</param>
        </member>
        <member name="M:DequeNet.Deque`1.CalcIndex(System.Int32)">
            <summary>
            Uses modular arithmetic to calculate the correct ring buffer index for a given (possibly out-of-bounds) index.
            If <paramref name="position"/> is over the array's upper boundary, the returned index "wraps/loops around" the upper boundary.
            </summary>
            <param name="position">The possibly out-of-bounds index.</param>
            <returns>The ring buffer index.</returns>
        </member>
        <member name="M:DequeNet.Deque`1.VirtualIndexToBufferIndex(System.Int32)">
            <summary>
            Calculates the ring buffer index corresponding to a given "virtual index".
            A virtual index is the index of an item as seen from an enumerator's perspective, i.e., as if the items were laid out sequentially starting at index 0.
            As such, a virtual index is in the range [0, Count - 1].
            </summary>
            <param name="index">The virtual index.</param>
            <returns>A ring buffer index</returns>
        </member>
        <member name="P:DequeNet.Deque`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:DequeNet.Deque`1"/>.
            </summary>
        </member>
        <member name="P:DequeNet.Deque`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            <returns>
            true if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, false.
            For <see cref="T:DequeNet.Deque`1"/>, this property always returns false.
            </returns>
        </member>
        <member name="P:DequeNet.Deque`1.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <returns>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </returns>
        </member>
        <member name="P:DequeNet.Deque`1.IsEmpty">
            <summary>
            Gets a value that indicates whether the <see cref="T:DequeNet.Deque`1"/> is empty.
            </summary>
        </member>
        <member name="P:DequeNet.Deque`1.Capacity">
            <summary>
            Gets or sets the total number of elements the internal data structure can hold without resizing.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"><see cref="P:DequeNet.Deque`1.Capacity"/> cannot be set to a value less than <see cref="P:DequeNet.Deque`1.Count"/>.</exception>
        </member>
        <member name="P:DequeNet.Deque`1.LoopsAround">
            <summary>
            Determines whether the deque "loops around" the array's boundary, i.e., whether the rightmost's index is lower than the leftmost's.
            </summary>
            <returns>true if the deque loops around the array's boundary; false otherwise.</returns>
        </member>
        <member name="P:DequeNet.Deque`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Index was out of range. Must be non-negative and less than <see cref="P:System.Collections.Generic.ICollection`1.Count"/>.</exception>
        </member>
        <member name="T:DequeNet.Deque`1.Enumerator">
            <summary>
            Supports a simple iteration over a generic <see cref="T:DequeNet.Deque`1"/>.
            </summary>
        </member>
        <member name="M:DequeNet.Deque`1.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the deque.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the deque.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:DequeNet.Deque`1.Enumerator.System#Collections#IEnumerator#Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection was modified after the enumerator was created.
            </exception>
        </member>
        <member name="M:DequeNet.Deque`1.Enumerator.Dispose">
            <summary>
            Releases the enumerator's resources.
            </summary>
        </member>
        <member name="M:DequeNet.Deque`1.Enumerator.Validate">
            <summary>
            Verify that the deque hasn't been modified.
            </summary>
        </member>
        <member name="P:DequeNet.Deque`1.Enumerator.Current">
            <summary>
            Gets the element in the <see cref="T:DequeNet.Deque`1"/> at the current position of the enumerator.
            </summary>
        </member>
        <member name="M:DequeNet.Extensions.IntExtensions.Mod(System.Int32,System.Int32)">
            <summary>
            Applies the modulo operator.
            If <paramref name="n"/> is greater than zero, the result will be in the range [0, n-1].
            If it's less than zero, the result will be in the range [n+1, 0].
            </summary>
            <param name="a">The dividend.</param>
            <param name="n">The divisor. Must be different than zero.</param>
            <returns>The result of (<paramref name="a"/> mod <paramref name="n"/>).</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="n"/> is zero.</exception>
        </member>
    </members>
</doc>
